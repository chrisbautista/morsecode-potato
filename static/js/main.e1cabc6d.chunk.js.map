{"version":3,"sources":["hooks/useMorsecode.js","components/MorsecodeTranslator/index.js","App.js","serviceWorker.js","index.js"],"names":["MorseCode","MorsecodeAbbrev","HELP","CONFIRM","REPORT","FROM","DISTANCE","MorseKeys","Object","values","AlphaKeys","keys","AbbrevKeys","sort","a","b","length","getMorseCode","chr","codeKey","indexOf","toUpperCase","alphaToMorsecode","msg","morse","split","map","join","replaceWithAbbrev","text","newMessage","forEach","key","replace","InputTextArea","styled","textarea","Input","MorsecodeBox","LabelSpan","span","MorseCodeLabel","label","AbbrevTableWrapper","div","AbbrevTable","table","labels","MorsecodeTranslator","useState","isReplacedAbbrev","setReplacedAbbrev","initial","shouldReplaceWithAbbrev","message","setMessage","translated","setTranslated","cleanMessage","trim","useEffect","cleanedMessage","tmpMessage","useMorsecode","htmlFor","id","value","onChange","e","target","type","checked","readOnly","abbrevList","title","toLowerCase","charAt","slice","renderAbbrev","AppContainer","GithubAnchor","GitHub","href","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e1cabc6d.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nexport default function useMorsecode(initial, shouldReplaceWithAbbrev = true) {\r\n  let [message, setMessage] = useState(initial);\r\n  let [translated, setTranslated] = useState(\"\");\r\n\r\n  function cleanMessage(msg) {\r\n    return msg ? msg.toUpperCase().trim() : \"\";\r\n  }\r\n\r\n  useEffect(() => {\r\n    let cleanedMessage = cleanMessage(message);\r\n\r\n    let tmpMessage = shouldReplaceWithAbbrev\r\n      ? replaceWithAbbrev(cleanedMessage)\r\n      : cleanedMessage;\r\n\r\n    if (tmpMessage !== cleanedMessage) {\r\n      setMessage(tmpMessage);\r\n    }\r\n\r\n    setTranslated(alphaToMorsecode(tmpMessage));\r\n  }, [message, shouldReplaceWithAbbrev]);\r\n\r\n  return {\r\n    message,\r\n    translated,\r\n    setMessage,\r\n  };\r\n}\r\n\r\nconst MorseCode = {\r\n  \".-\": \"A\",\r\n  \"-...\": \"B\",\r\n  \"-.-.\": \"C\",\r\n  \"-..\": \"D\",\r\n  \".\": \"E\",\r\n  \"..-.\": \"F\",\r\n  \"--.\": \"G\",\r\n  \"....\": \"H\",\r\n  \"..\": \"I\",\r\n  \".---\": \"J\",\r\n  \"-.-\": \"K\",\r\n  \".-..\": \"L\",\r\n  \"--\": \"M\",\r\n  \"-.\": \"N\",\r\n  \"---\": \"O\",\r\n  \".--.\": \"P\",\r\n  \"--.-\": \"Q\",\r\n  \".-.\": \"R\",\r\n  \"...\": \"S\",\r\n  \"-\": \"T\",\r\n  \"..-\": \"U\",\r\n  \"...-\": \"V\",\r\n  \".--\": \"W\",\r\n  \"-..-\": \"X\",\r\n  \"-.--\": \"Y\",\r\n  \"--..\": \"Z\",\r\n  \"-----\": \"0\",\r\n  \".----\": \"1\",\r\n  \"..---\": \"2\",\r\n  \"...--\": \"3\",\r\n  \"....-\": \"4\",\r\n  \".....\": \"5\",\r\n  \"-....\": \"6\",\r\n  \"--...\": \"7\",\r\n  \"---..\": \"8\",\r\n  \"----.\": \"9\",\r\n\r\n  /* punctuation marks */\r\n\r\n  \"..--..\": \".\",\r\n  \"._.--\": \",\",\r\n  \"-.- . .\": \":\",\r\n  \"-..-.\": \"?\",\r\n  \"..-. .-..\": \"'\",\r\n  \"... .-..\": \"-\",\r\n  \"..- -\": \"/\",\r\n  \"..... -.\": \"(\",\r\n  \"..... .. ..\": \")\",\r\n  \"..-. -.\": '\"',\r\n  \". ...\": \"&\",\r\n  \"---.\": \"!\",\r\n  \"... ..\": \";\",\r\n};\r\n\r\nexport const MorsecodeAbbrev = {\r\n  HELP: \"SOS\",\r\n  \"I SAY AGAIN\": \"II\",\r\n  CONFIRM: \"CFM\",\r\n  REPORT: \"RPT\",\r\n  \"REPEAT PLEASE\": \"RPT\",\r\n  \"I REPEAT AS FOLLOWS\": \"RPT\",\r\n  \"YES; CORRECT\": \"C\",\r\n  FROM: \"FM\",\r\n  \"THIS IS\": \"DE\",\r\n  DISTANCE: \"DX\",\r\n  \"INVITATION TO TRANSMIT\": \"K\",\r\n};\r\n\r\nconst MorseKeys = Object.values(MorseCode);\r\nconst AlphaKeys = Object.keys(MorseCode);\r\nconst AbbrevKeys = Object.keys(MorsecodeAbbrev).sort(\r\n  (a, b) => b.length - a.length\r\n);\r\n\r\nfunction getMorseCode(chr) {\r\n  if (chr === \" \") return \"/\";\r\n\r\n  let codeKey = MorseKeys.indexOf(chr.toUpperCase());\r\n  if (codeKey === -1 && chr !== \" \") {\r\n    return \"\";\r\n  }\r\n\r\n  return AlphaKeys[codeKey];\r\n}\r\n\r\nfunction alphaToMorsecode(msg) {\r\n  if (typeof msg !== \"string\") {\r\n    return \"invalid msg\";\r\n  }\r\n  const morse = msg.split(\"\").map(getMorseCode);\r\n  return `${morse.join(\" \")}`;\r\n}\r\n\r\nfunction replaceWithAbbrev(text) {\r\n  if (!text || typeof text !== \"string\") {\r\n    return \"\";\r\n  }\r\n\r\n  let newMessage = text.toUpperCase();\r\n  AbbrevKeys.forEach((key) => {\r\n    let abbrevIndex = newMessage.indexOf(key);\r\n    if (abbrevIndex !== -1) {\r\n      newMessage = newMessage.replace(key, MorsecodeAbbrev[key]);\r\n    }\r\n  });\r\n\r\n  return newMessage;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport useMorsecode, { MorsecodeAbbrev } from \"../../hooks/useMorsecode\";\r\n\r\nconst InputTextArea = styled.textarea`\r\n  border: 1px solid #ddd;\r\n  padding: 1rem;\r\n  width: 100%;\r\n  margin: 8px 0 0;\r\n  border-radius: 3px;\r\n  height: 160px;\r\n`;\r\n\r\nconst Input = styled(InputTextArea)`\r\n  border: 1px solid red;\r\n`;\r\n\r\nconst MorsecodeBox = styled(InputTextArea)`\r\n  border: 1px solid #ddd;\r\n  font-weight: bolder;\r\n  background-color: #ededed;\r\n`;\r\n\r\nconst LabelSpan = styled.span`\r\n  display: inline-block;\r\n  padding: 0 8px;\r\n  font-size: 0.875rem;\r\n`;\r\n\r\nconst MorseCodeLabel = styled.label`\r\n  margin-top: 1.2rem;\r\n  display: block;\r\n`;\r\n\r\nconst AbbrevTableWrapper = styled.div`\r\n  font-size: 0.75rem;\r\n  margin-top: 2rem;\r\n  width: auto;\r\n  height: 200px;\r\n  overflow-y: auto;\r\n  border: 1px solid #ddd;\r\n  display: inline-block;\r\n  padding: 5px 8px;\r\n`;\r\n\r\nconst AbbrevTable = styled.table`\r\n  th {\r\n    background-color: #ddd;\r\n  }\r\n  td,\r\n  th {\r\n    text-align: left;\r\n    border: 1px solid #ddd;\r\n    padding: 4px;\r\n  }\r\n`;\r\n\r\nconst labels = {\r\n  messageLabel: \"Message\",\r\n  morsecodeLabel: \"Morse code\",\r\n  sampleMessage: \"Nothing like potatoes.\",\r\n  replaceWithAbbrev: \"Replace with abbreviations.(see list at the bottom)\",\r\n  phrase: \"Phrase\",\r\n  abbreviation: \"Abbreviation\",\r\n};\r\n\r\nconst MorsecodeTranslator = () => {\r\n  let [isReplacedAbbrev, setReplacedAbbrev] = useState(false);\r\n  let { message, translated, setMessage } = useMorsecode(\r\n    labels.sampleMessage,\r\n    isReplacedAbbrev\r\n  );\r\n  function onReplaceAbbrev(e) {\r\n    setReplacedAbbrev(e.target.checked);\r\n  }\r\n\r\n  function renderAbbrev() {\r\n    const abbrevList = Object.keys(MorsecodeAbbrev).map((key) => {\r\n      let title = key.toLowerCase();\r\n      title = title.charAt(0).toUpperCase() + title.slice(1);\r\n      return (\r\n        <tr key={\"abbrev\" + key}>\r\n          <td>{MorsecodeAbbrev[key]}</td>\r\n          <td>{title}</td>\r\n        </tr>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <AbbrevTableWrapper>\r\n        <AbbrevTable>\r\n          <thead>\r\n            <tr>\r\n              <th>{labels.abbreviation}</th>\r\n              <th>{labels.phrase}</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{abbrevList}</tbody>\r\n        </AbbrevTable>\r\n      </AbbrevTableWrapper>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <label htmlFor=\"mpMessageBox\">{labels.messageLabel}</label>\r\n      <Input\r\n        id=\"mpMessageBox\"\r\n        value={message}\r\n        onChange={(e) => setMessage(e.target.value)}\r\n      />\r\n      <div>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            value={1}\r\n            checked={isReplacedAbbrev}\r\n            onChange={onReplaceAbbrev}\r\n          />\r\n          <LabelSpan>{labels.replaceWithAbbrev}</LabelSpan>\r\n        </label>\r\n      </div>\r\n      <MorseCodeLabel htmlFor=\"mpMorsecodeBox\">\r\n        {labels.morsecodeLabel}\r\n      </MorseCodeLabel>\r\n      <MorsecodeBox id=\"mpMorsecodeBox\" value={translated} readOnly />\r\n      <div>{renderAbbrev()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MorsecodeTranslator;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport MorsecodeTranslator from \"./components/MorsecodeTranslator\";\n\nconst AppContainer = styled.div`\n  padding: 4rem;\n  margin: 0 auto;\n  max-width: 1200px;\n  @media screen and (max-width: 840px) {\n    padding: 1rem;\n  }\n`;\n\nconst GithubAnchor = styled.a`\n  display: inline-block;\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 1rem;\n  background-color: yellow;\n  border: 1px solid #ddd;\n  box-shadow: 0 1px 5px 0 rgba(0, 0, 0, 0.3);\n\n  @media screen and (max-width: 840px) {\n    width: 80px;\n    font-size: 0.75rem;\n    padding: 5px;\n    text-align: right;\n    transform: rotate(45deg);\n    top: 25px;\n  }\n`;\n\nfunction GitHub() {\n  return (\n    <GithubAnchor href=\"https://github.com/chrisbautista/morsecode-potato\">\n      codespud @ github\n    </GithubAnchor>\n  );\n}\n\nfunction App() {\n  return (\n    <AppContainer>\n      <h1>Morsecode-Potato</h1>\n      <MorsecodeTranslator />\n      <GitHub />\n    </AppContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}