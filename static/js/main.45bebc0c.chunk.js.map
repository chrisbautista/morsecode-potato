{"version":3,"sources":["hooks/useMorsecode.js","components/MorsecodeTranslator/index.js","App.js","serviceWorker.js","index.js"],"names":["useMorsecode","initial","useState","message","setMessage","translated","setTranslated","useEffect","translatedMessage","msg","morse","split","map","getMorseCode","console","log","join","alphaToMorsecode","trim","MorseCode","MorseKeys","Object","values","AlphaKeys","keys","chr","code","toUpperCase","charCodeAt","notAlpha","indexOf","InputTextArea","styled","textarea","Input","MorsecodeBox","labels","MorsecodeTranslator","htmlFor","id","value","onChange","e","target","readOnly","AppContainer","div","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.45bebc0c.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nexport default function useMorsecode(initial) {\r\n  let [message, setMessage] = useState(initial);\r\n  let [translated, setTranslated] = useState(\"\");\r\n\r\n  function cleanMessage(msg) {\r\n    return msg.trim();\r\n  }\r\n\r\n  useEffect(() => {\r\n    let tmpMessage = cleanMessage(message);\r\n    let translatedMessage = alphaToMorsecode(tmpMessage);\r\n    setTranslated(translatedMessage);\r\n  }, [message]);\r\n\r\n  return {\r\n    message,\r\n    translated,\r\n    setMessage,\r\n  };\r\n}\r\n\r\nconst MorseCode = {\r\n  \".-\": \"A\",\r\n  \"-...\": \"B\",\r\n  \"-.-.\": \"C\",\r\n  \"-..\": \"D\",\r\n  \".\": \"E\",\r\n  \"..-.\": \"F\",\r\n  \"--.\": \"G\",\r\n  \"....\": \"H\",\r\n  \"..\": \"I\",\r\n  \".---\": \"J\",\r\n  \"-.-\": \"K\",\r\n  \".-..\": \"L\",\r\n  \"--\": \"M\",\r\n  \"-.\": \"N\",\r\n  \"---\": \"O\",\r\n  \".--.\": \"P\",\r\n  \"--.-\": \"Q\",\r\n  \".-.\": \"R\",\r\n  \"...\": \"S\",\r\n  \"-\": \"T\",\r\n  \"..-\": \"U\",\r\n  \"...-\": \"V\",\r\n  \".--\": \"W\",\r\n  \"-..-\": \"X\",\r\n  \"-.--\": \"Y\",\r\n  \"--..\": \"Z\",\r\n  \"-----\": \"0\",\r\n  \".----\": \"1\",\r\n  \"..---\": \"2\",\r\n  \"...--\": \"3\",\r\n  \"....-\": \"4\",\r\n  \".....\": \"5\",\r\n  \"-....\": \"6\",\r\n  \"--...\": \"7\",\r\n  \"---..\": \"8\",\r\n  \"----.\": \"9\",\r\n  \" / \": \" \",\r\n};\r\n\r\nconst MorseKeys = Object.values(MorseCode);\r\nconst AlphaKeys = Object.keys(MorseCode);\r\n\r\nfunction notAlpha(chr) {\r\n  let code = chr.toUpperCase().charCodeAt(0);\r\n  return (\r\n    !(code > 47 && code < 58) && // numeric (0-9)\r\n    !(code > 64 && code < 91) && // upper alpha (A-Z)\r\n    !(code > 96 && code < 123) // lower alpha (a-z)\r\n  );\r\n}\r\n\r\nfunction getMorseCode(chr) {\r\n  if (notAlpha(chr) && chr !== ' ') {\r\n    return \"(stop)\";\r\n  }\r\n\r\n  return AlphaKeys[MorseKeys.indexOf(chr.toUpperCase())] + \" \";\r\n}\r\n\r\nfunction alphaToMorsecode(msg) {\r\n  if (typeof msg !== \"string\") {\r\n    return \"invalid msg\";\r\n  }\r\n  const morse = msg.split(\"\").map(getMorseCode);\r\n  console.log(\"x\", morse);\r\n  return `${morse.join(\"\")}`;\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport useMorsecode from \"../../hooks/useMorsecode\";\r\n\r\nconst InputTextArea = styled.textarea`\r\n  border: 1px solid #ddd;\r\n  padding: 1rem;\r\n  width: 100%;\r\n  margin: 10px 0;\r\n  border-radius: 3px;\r\n  height: 160px;\r\n`;\r\n\r\nconst Input = styled(InputTextArea)`\r\n  border: 1px solid red;\r\n`;\r\n\r\nconst MorsecodeBox = styled(InputTextArea)`\r\n  border: 1px solid #ddd;\r\n  font-weight: bolder;\r\n  background-color: #ededed;\r\n`;\r\n\r\nconst labels = {\r\n  messageLabel: \"Message\",\r\n  morsecodeLabel: \"Morse code\",\r\n  sampleMessage: \"Nothing like potatoes.\"\r\n};\r\n\r\nconst MorsecodeTranslator = () => {\r\n  let { message, translated, setMessage } = useMorsecode(labels.sampleMessage);\r\n  return (\r\n    <div>\r\n      <label htmlFor=\"mpMessageBox\">{labels.messageLabel}</label>\r\n      <Input\r\n        id=\"mpMessageBox\"\r\n        value={message}\r\n        onChange={(e) => setMessage(e.target.value)}\r\n      />\r\n      <label htmlFor=\"mpMorsecodeBox\">{labels.morsecodeLabel}</label>\r\n      <MorsecodeBox id=\"mpMorsecodeBox\" value={translated} readOnly/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MorsecodeTranslator;\r\n","import React from 'react';\nimport './App.css';\nimport styled from 'styled-components';\nimport MorsecodeTranslator from './components/MorsecodeTranslator'\n\nconst AppContainer = styled.div`\n  padding: 4rem;\n  @media screen and (max-width: 840px){\n    padding: 1rem;\n  }\n`;\n\nfunction App() {\n  return (\n    <AppContainer>\n        <h1>Morsecode-Potato</h1>\n        <MorsecodeTranslator />\n    </AppContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}